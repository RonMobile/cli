errorsSigmaAll <- data.frame()
rmseAll <- data.frame()
# max date from all data
maxstartdate <- hist %>% group_by() %>% summarise(max.date=max(startdate, na.rm = TRUE)) %>% ungroup() %>% pull()
dates <- hist %>% filter(startdate == maxstartdate) %>% select(startdate) %>% distinct() %>% pull()
dates <- hist %>% filter(startdate >= as.Date('2020-01-06')) %>% select(startdate) %>% distinct() %>% pull()
dates <- maxstartdate
# SKUID loop
source('sim_filter.R', local = TRUE, encoding = 'utf-8')
skuid <- hist %>% distinct(item, loc) %>%
left_join(servicelevelsku, by=c('item', 'loc'))
# inner_join(sim_filter) # grupa przypadkow do przetestowania
# demand classification - prosta podstawowa
hist_t <- transformHist(hist, dateformat = '%Y-%m-%d', impute.with.zero)
hist_zero <- calcZero(hist_t, startdate=NA)
hist_length <- calcLength(hist_t, startdate=NA)
hist_event <- flagEventZero(hist_t, lags)
skuid2 <- skuid %>%
left_join(hist_zero, by = c('item', 'loc')) %>%
left_join(hist_length %>% select(item, loc, periods_group), by = c('item', 'loc')) %>%
left_join(hist_event %>% select(item, loc, event.zero.flag))
# which(skuid$item=='CR13WS180-T26A380' & skuid$loc=="MWREWE")
shiny::runApp('datasciencer/ml1_dashboard')
n
n
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
createResid <- function(train, fitted, if.event.zero) {
# fitted <- fitted_best
# train <- train.event
# if.event.zero <- TRUE
browser()
if(if.event.zero) {
event.filter <- train %>%
group_by(lagnameid) %>%
mutate(mean= mean(qty)) %>%
ungroup() %>%
filter(mean > 0) %>%
distinct(startdate)
}
df.temp <- train %>%
select(qty, startdate, licznik) %>%
distinct() %>%
bind_cols(data.frame(fitted=fitted)) %>%
mutate(resid = qty - fitted) %>%
{if(if.event.zero) inner_join(., event.filter) else .} %>%
select(-startdate)
return(df.temp)
}
fitted_best
df.resid
bestmodel$model
calcErrorEmpiricQunatiles(bestmodel$model, df.resid, sl_lower_upper, qnames, rounding.digits.no.zero)
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
df.result.test <- df.train.fit %>%
mutate(type="fitted") %>%
{if(min.train.flag) bind_rows(., df.test.forecast %>% mutate(type="forecast")) else .} %>%
filter(model == bestmodel$model) %>%
unnest(cols = c(df_data)) %>%
left_join(sales.extended %>% select(startdate, qty.org))
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
shiny::runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp()
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
shiny::runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
View(min.train.flag)
runApp('datasciencer/ml1_dashboard')
shiny::runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp()
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
shiny::runApp('datasciencer/ml1_dashboard')
8/102
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
source('_library.R', local = TRUE, encoding = 'utf-8')
source('_config_symulator.R', local = TRUE, encoding = 'utf-8')
source('../common/_load_files.R', local = TRUE, encoding = 'utf-8')
source('../common/_transform.R', local = TRUE, encoding = 'utf-8')
source('../common/_demand_classification.R', local = TRUE, encoding = 'utf-8')
# funkcje
# source('_load_data.R', local = TRUE, encoding = 'utf-8')
source('_models.R', local = TRUE, encoding = 'utf-8')
source('_TestData.R', local = TRUE, encoding = 'utf-8')
source('_Outliers.R', local = TRUE, encoding = 'utf-8')
source('_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
source('_qualitymeasures.R', local = TRUE, encoding = 'utf-8')
source('_model_class.R', local = TRUE, encoding = 'utf-8')
source('_event_models.R', local = TRUE, encoding = 'utf-8')
start.time <- Sys.time()
# Load data
###################################################
hist <- loadFlatFileData(paste0(data.path, file.hist.name), colclass = c('character', 'character', 'Date', 'numeric', 'numeric', 'character'), namescol = c('item', 'loc', 'startdate', 'daysofsales', 'qty', 'outliertype')) %>%
mutate(item=as.character(item), loc=as.character(loc))
eventscalendarcustomer <- loadFlatFileData(paste0(data.path, file.eventscalendarcustomer.name), colclass = c('character', 'character', 'character', 'Date', 'Date', 'numeric', 'numeric', 'numeric'), c('nameid', 'customername', 'type', 'startdate', 'enddate', 'startlag', 'laglengthweeks', 'leadlengthweeks'))
sku <- loadFlatFileData(paste0(data.path, file.sku.name))
abc <- loadFlatFileData(paste0(data.path, file.abc.name), c('character', 'numeric'), c('abc', 'servicelevel'))
###################################################
# sku + abc
###################################################
servicelevelsku <- sku %>%
select(indeks_produktu, indeks_lokalizacji, indeks_klasyfikacji_abc) %>%
setNames(c('item', 'loc', 'abc')) %>%
mutate(item=as.character(item), loc=as.character(loc)) %>%
left_join(abc, by=c('abc')) %>% select(-c(abc))
###################################################
# Events Calendar Customer prepare
###################################################
anyevents <- ifelse(nrow(eventscalendarcustomer)>0, TRUE, FALSE)
if(anyevents) {
eventscalendar <- loadFlatFileData(file.eventscalendar.path, c('character', 'character', 'character', 'Date', 'Date', 'numeric'))
eventscalendarcustomer <- joinECCwithEC(eventscalendarcustomer, eventscalendar)
laglead <- prepareLagLead(eventscalendarcustomer)
lags <- laglead[[1]]
leads <- laglead[[2]]
rm(laglead)
}
###################################################
# data frames for results
ForecastSalesQualityAll <- data.frame()
pForecastSalesAll <- data.frame()
errorsSigmaAll <- data.frame()
rmseAll <- data.frame()
# max date from all data
maxstartdate <- hist %>% group_by() %>% summarise(max.date=max(startdate, na.rm = TRUE)) %>% ungroup() %>% pull()
dates <- hist %>% filter(startdate == maxstartdate) %>% select(startdate) %>% distinct() %>% pull()
dates <- hist %>% filter(startdate >= as.Date('2020-01-06')) %>% select(startdate) %>% distinct() %>% pull()
dates <- maxstartdate
data.wilga <- read.csv("D:/GIT/datasciencer/data/data-wilga.csv", stringsAsFactors=FALSE)
View(data.wilga)
source('~/.active-rstudio-document', echo=TRUE)
library(readr)
data_wilga <- read_csv("datasciencer/data/data-wilga.csv")
View(data.wilga)
View(data_wilga)
library(readr)
data_wilga <- read_csv("datasciencer/data/data-wilga.csv")
View(data_wilga)
string <- paste0(data_wilga, collapse = ', ')
string
View(data_wilga)
str(data_wilga)
glimpse(data_wilga)
string
View(data_wilga)
string <- paste0(as.character(data_wilga), collapse = ', ')
string <- paste0(as.character(data_wilga), collapse = ', ')
string
string <- to_string(paste0(data_wilga, collapse = ', '))
string
string <- to_string(paste0(data_wilga, collapse = '', '))
string
string <- to_string(paste0(data_wilga, collapse = '/', /'))
string
string <- toString(paste0(data_wilga, collapse = '/', /'))
string
string <- toString(paste0(data_wilga, collapse = '//', //''))
string <- toString(paste0(data_wilga, collapse = '/', /''))
string <- toString(paste0(data_wilga, collapse = '', ''))
string
string <- toString(paste0(data_wilga, collapse = ''', '''))
string <- toString(paste0(data_wilga, collapse = ''', ''''))
string <- toString(paste0(data_wilga, collapse = '''', ''''))
string <- toString(paste0(data_wilga, collapse = ', /''))
string
string
string <- toString(paste0(data_wilga, collapse = ', /''))
string
string <- toString(paste0(data_wilga, collapse = ', \''))
string <- toString(paste0(data_wilga, collapse = ', //''))
string <- toString(paste0(data_wilga, collapse = ', //''))
string <- toString(paste0(data_wilga, collapse = ', //"'))
string <- paste0(data_wilga, collapse = ', ')
string
string <- paste0(data_wilga, collapse = ',/' ')
string
string <- paste0(data_wilga, collapse = ',//' ')
library(readr)
data_wilga <- read_csv("datasciencer/data/data-wilga.csv",
col_types = cols(checkbox_importanddatarecalculationmodifieddate = col_double(),
checkbox_outlierscheckmodifieddate = col_character(),
lastsynchronization = col_character()))
data.wilga <- read.csv("D:/GIT/datasciencer/data/data-wilga.csv", stringsAsFactors=FALSE)
View(data.wilga)
View(data.wilga)
data.wilga <- read.csv("D:/GIT/datasciencer/data/data-wilga.csv", encoding="UTF-8", stringsAsFactors=FALSE)
View(data.wilga)
string <- paste0(data.wilga, collapse = ', ')
string
string <- paste0(data.wilga, collapse = ',\' ')
string
string <- paste0(data.wilga, collapse = '\', \'')
string
string <- paste0(data.wilga, collapse = '\', \'') %>%
gsub('\'True\'', 'True')
# PRZYGOTOWANIE DANYCH KLIENTA zrzuconych z bazy DEMO etc.
library(dplyr)
string <- paste0(data.wilga, collapse = '\', \'') %>%
gsub('\'True\'', 'True')
string
string <- paste0(data.wilga, collapse = '\', \'') %>%
gsub('\'True\'', 'True', .)
string
string <- paste0(data.wilga, collapse = '\', \'') %>%
gsub('\'True\'', 'True', .) %>%
gsub('\'False\'', 'False', .)
string
shiny::runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
runApp('D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/RonAndroidDemo')
#load scripts and functions
source('../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../common/_load_files.R', local=TRUE, encoding = "UTF-8")
source('../common/_transform.R', local=TRUE, encoding = "UTF-8")
source('../common/_quality_measure.R', local=TRUE, encoding = "UTF-8")
source('../common/_demand_classification.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
source('../ml1_symulator_stock/_dfrecomendation.R', local = TRUE, encoding = 'utf-8')
# config
company_id <- 9005
item_no <- 68
loc_no <- 10
options(scipen = 9999)
source('_config_symulator.R', local = TRUE, encoding = 'utf-8')
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
# Credit to kxx
library(data.table)
library(lightgbm)
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
result_vector <- c("Fernity_1.4.test1_2021-08-30")
# LICZENIE JAKOSCI PROGNOZ Z SYMULATORA ML1
# config
options(scipen = 9999)
#load scripts and functions
source('../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../common/_load_files.R', local=TRUE, encoding = "UTF-8")
source('../common/_transform.R', local=TRUE, encoding = "UTF-8")
source('../../smartstockr/ForecastJacek/R/QualityMeasuresClass.R', local = TRUE, encoding = 'utf-8')
source('../common/_quality_measure.R', local=TRUE, encoding = "UTF-8")
source('../common/_demand_classification.R', local=TRUE, encoding = "UTF-8")
# source('../common/db_connection.R', local=TRUE, encoding = "UTF-8")
# source('extract.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_config_symulator.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
# load results - forecast and quality
result_vector <- c("MillanoGroup_1.4.test1_2021-08-23", "MillanoGroup_1.4.test2_2021-08-21")
result_vector <- c("Fernity_1.4.test1_2021-08-30")
quality <- result <- data.frame()
for (i in 1:length(result_vector)) {
load(paste0(result.path, 'Forecast_', result_vector[i], '.RData'))
result <- bind_rows(result, pForecastSalesAll)
load(paste0(result.path, 'Quality_', result_vector[i], '.RData'))
quality <- bind_rows(quality, ForecastSalesQualityAll)
}
result_vector <- c("Forecast_Fernity_1.4.test1_2021-08-30")
quality <- result <- data.frame()
for (i in 1:length(result_vector)) {
load(paste0(result.path, 'Forecast_', result_vector[i], '.RData'))
result <- bind_rows(result, pForecastSalesAll)
load(paste0(result.path, 'Quality_', result_vector[i], '.RData'))
quality <- bind_rows(quality, ForecastSalesQualityAll)
}
result_vector <- c("Fernity_1.4.test1_2021-08-30")
quality <- result <- data.frame()
for (i in 1:length(result_vector)) {
load(paste0(result.path, 'Forecast_', result_vector[i], '.RData'))
result <- bind_rows(result, pForecastSalesAll)
load(paste0(result.path, 'Quality_', result_vector[i], '.RData'))
quality <- bind_rows(quality, ForecastSalesQualityAll)
}
shiny::runApp('datasciencer/ml1_dashboard')
shiny::runApp('datasciencer/ml1_dashboard')
df <- data.frame(a=c(1:10))
library(dplyr)
library(zoo)
library(dplyr)
df1 <-df %>%
mutate(aaa = rollapply(a, 0, sum))
View(df1)
df1 <-df %>%
mutate(aaa = rollapply(a, b, sum, partial = TRUE))
df <- data.frame(a=c(1:10), b=c(2,0,3,0,2,0,2,0,2,0))
df1 <-df %>%
mutate(aaa = rollapply(a, b, sum, partial = TRUE))
df <- data.frame(a=c(1:10), b=c(2,1,3,0,2,0,2,0,2,0))
df1 <-df %>%
mutate(aaa = rollapply(a, b, sum, partial = TRUE))
df <- data.frame(a=c(1:10), b=c(2,1,3,0,2,0,2,0,2,5))
df1 <-df %>%
mutate(aaa = rollapply(a, b, sum, partial = TRUE))
df <- data.frame(a=c(1:10), b=c(2,1,3,0.5,2,0,2,0,2,5))
df1 <-df %>%
mutate(aaa = rollapply(a, b, sum, partial = TRUE))
12*400 * 3
12*400000 * 3
shiny::runApp('datasciencer/ml1_dashboard')
#load scripts and functions
source('../../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../../common/_load_files.R', local=TRUE, encoding = "UTF-8")
list.files(path_data)
#load scripts and functions
source('../../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../../common/_load_files.R', local=TRUE, encoding = "UTF-8")
path_data <- '../../data/eurocash_test/neuron/'
list.files(path_data)
dir(path_data)
shiny::runApp('datasciencer/ml1_dashboard')
as.Date("2021-12-08") - as.Date("2021-09-06")
shiny::runApp('datasciencer/ml1_dashboard')
runApp('datasciencer/ml1_dashboard')
View(rmse.test.forecast)
View(rmse.test.forecast)
View(rmse.test.forecast)
runApp('datasciencer/ml1_dashboard')
94/14
# Analiza wynikow METOD na podstawie ForecastSalesQuality z SYMULATORA ML1
#************************************************************
# config
options(scipen = 9999)
#load scripts and functions
source('../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../common/_load_files.R', local=TRUE, encoding = "UTF-8")
source('../common/_transform.R', local=TRUE, encoding = "UTF-8")
source('../../smartstockr/ForecastJacek/R/QualityMeasuresClass.R', local = TRUE, encoding = 'utf-8')
source('../common/_quality_measure.R', local=TRUE, encoding = "UTF-8")
source('../common/_demand_classification.R', local=TRUE, encoding = "UTF-8")
# source('../common/db_connection.R', local=TRUE, encoding = "UTF-8")
# source('extract.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_config_symulator.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
# load data
load(paste0(result.path, 'Forecast_MillanoGroup_1.4.test2_2021-08-21.RData'))
result <- pForecastSalesAll
load(paste0(result.path, 'Quality_MillanoGroup_1.4.test2_2021-08-21.RData'))
quality <- ForecastSalesQualityAll
load(paste0(result.path, 'rmseAll_2021-05-15.RData'))
# result <- loadFlatFileData(path=paste0(result.path, 'Result.csv'))
hist <- loadFlatFileData(path=paste0(data.path, 'HIST.csv'))
item <- loadFlatFileData(path=paste0(data.path, 'ITEM.csv'))
group <- loadFlatFileData(path=paste0(data.path, 'GROUP.csv'))
inventory <- loadFlatFileData(path=paste0(data.path, 'INVENTORY.csv'))
sku <- loadFlatFileData(path=paste0(data.path, 'SKU.csv'))
abc <- loadFlatFileData(path=paste0(data.path, 'ABCCLASSIFICATION.csv'))
eventscalendarcustomer <- loadFlatFileData(paste0(data.path, file.eventscalendarcustomer.name), colclass = c('character', 'character', 'character', 'Date', 'Date', 'numeric', 'numeric', 'numeric'), c('nameid', 'customername', 'type', 'startdate', 'enddate', 'startlag', 'laglengthweeks', 'leadlengthweeks'))
# Events Calendar Customer prepare
#######################
shiny::runApp('datasciencer/ml1_dashboard')
as.Date("2020-09-28")
lubridate::wday(as.Date("2020-09-28"))
lubridate::week(as.Date("2020-09-28"))
lubridate::isoweek(as.Date("2020-09-28"))
lubridate::isoweek(as.Date("2020-11-01"))
lubridate::week(as.Date("2020-11-01"))
lubridate::week(as.Date("2020-09-28"))
lubridate::week(as.Date("2020-09-29"))
lubridate::week(as.Date("2020-10-31"))
lubridate::week(as.Date("2020-11-01"))
lubridate::week(as.Date("2020-10-25"))
lubridate::week(as.Date("2020-10-26"))
lubridate::week(as.Date("2020-10-27"))
lubridate::week(as.Date("2020-10-28"))
lubridate::week(as.Date("2020-09-29"))
lubridate::week(as.Date("2020-09-30"))
lubridate::isoweek(as.Date("2020-09-27"))
lubridate::isoweek(as.Date("2020-11-01"))
lubridate::isoweek(as.Date("2020-09-28"))
tions(scipen = 9999)
#load scripts and functions
source('../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../common/_load_files.R', local=TRUE, encoding = "UTF-8")
source('../common/_transform.R', local=TRUE, encoding = "UTF-8")
source('../../smartstockr/ForecastJacek/R/QualityMeasuresClass.R', local = TRUE, encoding = 'utf-8')
source('../common/_quality_measure.R', local=TRUE, encoding = "UTF-8")
source('../common/_demand_classification.R', local=TRUE, encoding = "UTF-8")
# source('../common/db_connection.R', local=TRUE, encoding = "UTF-8")
# source('extract.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_config_symulator.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
#load scripts and functions
source('../../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../../common/_load_files.R', local=TRUE, encoding = "UTF-8")
path_data <- '../../data/eurocash_test/neuron/'
load(file = "../../data/eurocash_test/neuron/transactions.RData")
load(file = "../../data/eurocash_test/neuron/promo_ecd.RData")
promo <- promo_ecd %>%
distinct() %>%
select(-c(created_by, created_date)) %>%
mutate(from=as.Date(from), to=as.Date(to)) %>%
filter(status!='1 Nowa', status!='2 Do zatwierdzenia', status!='9 Anulowana') %>%
filter((promo_area == 'C Promocja centralna' & makroregion == 'CT Centrala') |
(promo_area == 'R Promocja regionalna' & makroregion == '7 BÄ™dzin') |
(promo_area == 'C Promocja centralna' & makroregion == 'DC Biuro sprzedaĹĽy DC')
) %>%
filter(to < as.Date("2100-01-01")) %>%
mutate(promo_desc=tolower(promo_desc)) %>%
filter(!grepl("budĹĽet", promo_desc)) %>% filter(!grepl("usuniÄ™ta", promo_desc))
# dlugosc promocji
length <- promo %>%
distinct(dsprz, promo_id, from, to, makroregion, promo_area, promo_type_type_desc, promo_desc) %>%
mutate(dl =  as.numeric(to - from + 1))
temp <- length %>%
group_by(ceiling(dl /10)) %>%
group_by(dl) %>%
summarise(n=n()) %>%
ungroup() %>%
mutate(ncum = cumsum(n), wsp= round(cumsum(n) / sum(n), 4))
library(ggplot2)
ggplot(length %>% filter(dl <= 31))+
theme_minimal()+
geom_histogram(aes(x = dl), alpha = 0.8, bin=100)
# dlugosc promocji wystepujaca na transakcjach
temp <- promo_data %>%
# group_by(ceiling(dl /10)) %>%
group_by(dl) %>%
summarise(n=n(), n_trans =  sum(n_trans)) %>%
ungroup() %>%
mutate(ncum = cumsum(n), wsp= round(cumsum(n) / sum(n), 4),
ntrans_cum = cumsum(n_trans), wsp_trans=round(cumsum(n_trans) / sum(n_trans), 4))
#load scripts and functions
source('../../common/_library.R', local=TRUE, encoding = "UTF-8")
# LICZENIE JAKOSCI PROGNOZ Z SYMULATORA ML1
# config
options(scipen = 9999)
#load scripts and functions
source('../common/_library.R', local=TRUE, encoding = "UTF-8")
source('../common/_load_files.R', local=TRUE, encoding = "UTF-8")
source('../common/_transform.R', local=TRUE, encoding = "UTF-8")
source('../../smartstockr/ForecastJacek/R/QualityMeasuresClass.R', local = TRUE, encoding = 'utf-8')
source('../common/_quality_measure.R', local=TRUE, encoding = "UTF-8")
source('../common/_demand_classification.R', local=TRUE, encoding = "UTF-8")
# source('../common/db_connection.R', local=TRUE, encoding = "UTF-8")
# source('extract.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_config_symulator.R', local=TRUE, encoding = "UTF-8")
source('../ml1_symulator/_eventscalendarcustomer.R', local = TRUE, encoding = 'utf-8')
# load results - forecast and quality
result_vector <- c("MillanoGroup_1.4.test1_2021-08-23", "MillanoGroup_1.4.test2_2021-08-21")
result_vector <- c("Fernity_1.4.test3_2021-09-15", "Fernity_1.4.test4_2021-09-15", "Fernity_1.4.test1_2021-09-15")
# result_vector <- c("Fernity_1.4.test1_2021-08-30")
quality <- result <- data.frame()
for (i in 1:length(result_vector)) {
# i <- 2
load(paste0(result.path, 'Forecast_', result_vector[i], '.RData'))
result <- bind_rows(result, pForecastSalesAll)
load(paste0(result.path, 'Quality_', result_vector[i], '.RData'))
quality <- bind_rows(quality, ForecastSalesQualityAll)
}
# load data
hist <- loadFlatFileData(path=paste0(data.path, 'HIST.csv'), dateformat = '%Y-%m-%d')
item <- loadFlatFileData(path=paste0(data.path, 'ITEM.csv'))
group <- loadFlatFileData(path=paste0(data.path, 'GROUP.csv'))
inventory <- loadFlatFileData(path=paste0(data.path, 'INVENTORY.csv'))
sku <- loadFlatFileData(path=paste0(data.path, 'SKU.csv'))
abc <- loadFlatFileData(path=paste0(data.path, 'ABCCLASSIFICATION.csv'))
eventscalendarcustomer <- loadFlatFileData(paste0(data.path, file.eventscalendarcustomer.name), colclass = c('character', 'character', 'character', 'Date', 'Date', 'numeric', 'numeric', 'numeric'), c('nameid', 'customername', 'type', 'startdate', 'enddate', 'startlag', 'laglengthweeks', 'leadlengthweeks'))
# Events Calendar Customer prepare
###################################################
anyevents <- ifelse(nrow(eventscalendarcustomer)>0, TRUE, FALSE)
if(nrow(eventscalendarcustomer)>0) {
eventscalendar <- loadFlatFileData(file.eventscalendar.path, c('character', 'character', 'character', 'Date', 'Date', 'numeric'))
eventscalendarcustomer <- joinECCwithEC(eventscalendarcustomer, eventscalendar)
laglead <- prepareLagLead(eventscalendarcustomer)
lags <- laglead[[1]]
leads <- laglead[[2]]
rm(laglead)
}
shiny::runApp('datasciencer/ml1_dashboard')
install.packages("h2o")
`errorsEC_lgbm_v1.0_1model_allVar_2021-09-28` <- readRDS("D:/GIT/neuronr/benchmark_lgbm/errorsEC_lgbm_v1.0_1model_allVar_2021-09-28.rds")
install.packages("h2o")
load("D:/GIT/neuronr/benchmark_lgbm/errorsEC_lgbm_v1.0_1model_allVar_2021-09-28.rds")
View(errorsEC)
library(drat)
library(drat)
options(dratBranch="docs")   # to default to using docs/ as we set up
# cli
setwd("D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/cli")
library(devtools)
# later
library(devtools)
devtools::build(binary = F)
library(drat)
library(drat)
options(dratBranch="docs")   # to default to using docs/ as we set up
insertPackage(file=c("../git/cli_3.0.1.tar.gz",
"../git/cli_3.0.1.zip"), repodir="../git/drat/")
# cli
setwd("D:/Adam Karolewski/Prace, praktyki, projekty/2021 RonAndroid/git/cli")
insertPackage(file=c("../git/cli_3.0.1.tar.gz",
"../git/cli_3.0.1.zip"), repodir="../git/drat/")
options(dratBranch="docs")   # to default to using docs/ as we set up
insertPackage(file=c("../git/cli_3.0.1.tar.gz",
"../git/cli_3.0.1.zip"), repodir="../git/drat/")
